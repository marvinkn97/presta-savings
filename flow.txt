#  Savings Management - Spring Boot API for a simple savings system.

   +  This API provides a simple savings system, allowing users to create savings accounts, deposit and withdraw funds, check their account balance, and view transaction history.

      +  Implemented endpoints to capture a list of customers, including their bio data
      +  Implemented endpoints to record savings transactions per customer, including transaction details such as transaction ID, date, payment method, and amount.
      +  Implemented endpoints to track the total savings amount for each person.
      +  Implemented endpoints to track the total savings amount received across all users
      +  Implemented endpoints to create and manage multiple savings products, such as Education Savings, Personal Savings, and Vacation Savings.
      +  Ensured proper error handling and validation of incoming requests.
      +  Implemented unit tests to validate the functionality of the API endpoints.


   + Technologies Used

     + Spring Boot 3
     + Spring Data JDBC
     + MySQL on Docker
     + Flyway for db migrations

   + Features

     +  Customer Management
       +  Create customer
       +  Update customer details
       +  Delete customer
       +  View customer

     +  Account Management
       +  Create Account
       +  Mark Account as active
       +  Update Account details
       +  Delete Account
       +  View Account

     +  Payment/Transaction Management
       +  Record payment (positive adjustment)
       +  Negative adjustment
       +  View payment



Features
Endpoints to record savings transactions per customer, including transaction details such as transaction ID, date, payment method, and amount.
Endpoints to track the total savings amount for each person.
Endpoints to track the total savings amount received across all users.

Implement controllers and endpoints for each required functionality.
Configure the appropriate database of your choice to store the data.
Implement the necessary service layer to handle the business logic.
Ensure proper error handling and validation of incoming requests.
Implement unit tests to validate the functionality of the API endpoints.
Document the APIs using both Postman and Swagger, providing clear descriptions and examples for each endpoint.


##########################################

SAmple

notification service that will expose send notification api
type: SMS or EMAIL
to: 254722XXXXX
from: CAKEYARD
subject - optional for sms
content: Thank you for your business....
etc..


Send email notification
send sms notification - notification service
send auth request to the external auth services...
send a reequest - payment service


4.1. Sprint 1 Features
Feat 1: Authentication requirements

Feat 1.1: Sign up baker using email address (local credentials)
Feat 1.2: Sign up baker using Google
Feat 1.3: Sign in baker using local credentials
Feat 1.4: Sign in baker using Google
Feat 1.5: Reset baker password (local credentials)
Feat 1.6: Change baker password (local credentials)
Feat 2: Authorization requirements:

Feat 2.1: admin role
should have role to manage bakers and their statuses only
should be able to view the notifications
should NOT view bakers data
Feat 2.1: baker role
should manage bakers data and any related data (orders, paymaents, notifications, etc.)
Feat 3: Baker management

Feat 3.1: Sign up baker using local credentials - same as Feat 1.1
Feat 3.2: Sign up baker using Google - same as Feat 1.2
Feat 3.3: List and search bakers (admin role)
Feat 3.4: Suspend baker profile (admin role)
Feat 3.5: Unspend/Activate baker profile (admin role)
Feat 3.6: Close baker profile (admin role)
Feat 3.7: Set/change baker payment details
Feat 3.8: Set/change baker profile logo
Feat 3.9: Set/change baker notification settings
Feat 3.10: Set/change baker notification templates
Feat 3.11: View baker profile (admin and baker roles)


