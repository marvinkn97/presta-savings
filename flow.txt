#  Savings Management - Spring Boot API for a simple savings system.

   +  This API provides a simple savings system, allowing users to create savings accounts, deposit and withdraw funds, check their account balance, and view transaction history.

      +  Implemented endpoints to capture a list of customers, including their bio data
      +  Implemented endpoints to record savings transactions per customer, including transaction details such as transaction ID, date, payment method, and amount.
      +  Implemented endpoints to track the total savings amount for each person.
      +  Implemented endpoints to track the total savings amount received across all users
      +  Implemented endpoints to create and manage multiple savings products, such as Education Savings, Personal Savings, and Vacation Savings.
      +  Ensured proper error handling and validation of incoming requests.
      +  Implemented unit tests to validate the functionality of the API endpoints.


   + Technologies Used

     + Spring Boot 3
     + MySQL on Docker


Features
Endpoints to record savings transactions per customer, including transaction details such as transaction ID, date, payment method, and amount.
Endpoints to track the total savings amount for each person.
Endpoints to track the total savings amount received across all users.
Endpoints to create and manage multiple savings products, such as Education Savings, Personal Savings, and Vacation Savings.


Test Steps:
Set up a Spring Boot project.
Define the necessary data models for customers, transactions, and savings products.
Implement controllers and endpoints for each required functionality.
Configure the appropriate database of your choice to store the data.
Implement the necessary service layer to handle the business logic.
Ensure proper error handling and validation of incoming requests.
Implement unit tests to validate the functionality of the API endpoints.
Document the APIs using both Postman and Swagger, providing clear descriptions and examples for each endpoint.


-- Customer table
CREATE TABLE Customer IF NOT EXISTS (
    customer_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL
);

-- Account table
CREATE TABLE Account IF NOT EXITS (
    account_id SERIAL PRIMARY KEY,
    customer_id INT REFERENCES Customer(customer_id),
    account_type VARCHAR(50) NOT NULL,
    balance DECIMAL(15, 2) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Transaction table
CREATE TABLE Transaction IF NOT EXISTS (
    transaction_id SERIAL PRIMARY KEY,
    account_id INT REFERENCES Account(account_id),
    transaction_type VARCHAR(50) NOT NULL,
    amount DECIMAL(15, 2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
